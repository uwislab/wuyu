name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Ê≠•È™§1ÔºöÊ£ÄÂá∫‰ª£Á†Å
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤ËÆ∞ÂΩïÔºå‰æø‰∫égit clean

      # Ê≠•È™§2ÔºöÈÄöËøáSSHÊâßË°åÈÉ®ÁΩ≤Êìç‰Ωú
      - name: Execute Deployment Scripts
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -ex  # ËØ¶ÁªÜËæìÂá∫Ê®°Âºè + ‰ªª‰ΩïÂëΩ‰ª§Â§±Ë¥•Á´ãÂç≥ÁªàÊ≠¢ËÑöÊú¨
            
            # ========== ÂàùÂßãÂåñÈò∂ÊÆµ ==========
            echo "üöÄ Starting deployment process..."
            BRANCH="main"
            REPO_DIR="/www/cicd_wuyu/wuyuProject/WuYuEducation"
            cd "$REPO_DIR"

            # ========== ‰ª£Á†ÅÂêåÊ≠•Èò∂ÊÆµ ==========
            echo "üîÑ Syncing $BRANCH branch..."
            git reset --hard HEAD
            git clean -f -d  # Ê∏ÖÈô§Êú™Ë∑üË∏™ÁöÑÊñá‰ª∂ÂíåÁõÆÂΩï
            git checkout -f $BRANCH
            git pull origin $BRANCH --rebase

            # ========== È™åËØÅÊõ¥Êñ∞ ==========
            echo "üîç Verifying code updates..."
            echo "Latest 3 commits:"
            git log -3 --oneline

            # ========== Á´ØÂè£ÈÖçÁΩÆ ==========
            SERVER_PORT=9080
            FRONTEND_PORT=9180
            BACKEND_JAR_NAME="wuyu-server-main.jar"
            FRONTEND_IMAGE="wuyu-front-main"
            BACKEND_LOG="backend-main.log"

            # ========== ÁõÆÂΩïÈ™åËØÅ ==========
            echo "üîç Verifying project directory structure..."
            if [ ! -d "wuyu-server" ]; then
              echo "‚ùå wuyu-server directory not found in $REPO_DIR"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
            
            if [ ! -d "wuyu-front" ]; then
              echo "‚ùå wuyu-front directory not found in $REPO_DIR"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi

            # ========== ÂâçÁ´ØÂ§ÑÁêÜÈò∂ÊÆµ (‰ºòÂåñÂêé) ========== 
            echo "üìÇ Moving to frontend directory..."
            cd wuyu-front
            
            # 1. ÂΩªÂ∫ïÊ∏ÖÁêÜÂ∑•‰ΩúÂå∫ÔºàÂÖ≥ÈîÆÊ≠•È™§Ôºâ
            echo "üßπ Performing deep clean of frontend workspace..."
            git clean -fdx .  # Âº∫Âà∂Âà†Èô§ÊâÄÊúâÊú™Ë∑üË∏™Êñá‰ª∂ÂíåÁõÆÂΩï
            
            # 2. È™åËØÅÊ∏ÖÁêÜÁªìÊûú
            echo "‚úÖ Cleaned workspace contents:"
            ls -la
            
            # 3. Á¶ÅÁî®ÁºìÂ≠òÊûÑÂª∫ÂâçÁ´ØÈïúÂÉè
            echo "üèóÔ∏è Building Frontend with NO-CACHE..."
            docker build \
              --no-cache \              # Á¶ÅÁî®ÊâÄÊúâÁºìÂ≠òÂ±Ç
              --pull \                  # Á°Æ‰øùÂü∫Á°ÄÈïúÂÉèÊúÄÊñ∞
              -t $FRONTEND_IMAGE . || { echo "‚ùå Frontend build failed"; exit 1; }
            
            # 4. ÈÉ®ÁΩ≤ÂâçÁ´ØÂÆπÂô®
            echo "üöÄ Deploying Frontend..."
            docker stop $FRONTEND_IMAGE >/dev/null 2>&1 || true
            docker rm $FRONTEND_IMAGE >/dev/null 2>&1 || true
            docker run -d \
              --name $FRONTEND_IMAGE \
              -p $FRONTEND_PORT:80 \
              $FRONTEND_IMAGE || { echo "‚ùå Frontend deployment failed"; exit 1; }

            # 5. Ê∏ÖÁêÜÊóßÈïúÂÉèËäÇÁúÅÁ©∫Èó¥
            echo "üßπ Cleaning old Docker images..."
            docker image prune -af --filter "until=48h"

            # ========== ÂêéÁ´ØÂ§ÑÁêÜÈò∂ÊÆµ ==========
            echo "üìÇ Moving to backend directory..."
            cd ../wuyu-server
            git clean -fdx .  # Ê∏ÖÁêÜÂêéÁ´ØÂ∑•‰ΩúÂå∫
            
            # ÂÅúÊ≠¢ÂΩìÂâçÁ´ØÂè£ËøêË°åÁöÑJavaÂ∫îÁî®
            echo "üõë Checking for existing processes on port $SERVER_PORT..."
            PID=$(lsof -t -i:$SERVER_PORT || true)
            if [ ! -z "$PID" ]; then
              echo "üõë Stopping existing backend process (PID: $PID)..."
              kill -9 $PID || true
              sleep 3  # Á≠âÂæÖËøõÁ®ãÈáäÊîæÁ´ØÂè£
            fi
            
            # ‰ΩøÁî®MavenÊûÑÂª∫È°πÁõÆ
            echo "üîß Compiling backend with Maven..."
            mvn clean package -DskipTests || { echo "‚ùå Backend build failed"; exit 1; }
            
            # ÈáçÂëΩÂêçJARÊñá‰ª∂
            mv target/*.jar target/$BACKEND_JAR_NAME
            
            # Ê∏ÖÁêÜÊóßÊó•Âøó
            rm -f $BACKEND_LOG
            
            # ÂêØÂä®JARÂåÖÔºàÂêéÂè∞ËøêË°åÔºâ
            echo "üöÄ Starting backend..."
            nohup java -jar target/$BACKEND_JAR_NAME --server.port=$SERVER_PORT > $BACKEND_LOG 2>&1 &
            BACKEND_PID=$!
            echo "üìù Backend PID: $BACKEND_PID"
            
            # È™åËØÅÂêéÁ´ØÂêØÂä®
            echo "‚è≥ Waiting for backend to start on port $SERVER_PORT..."
            MAX_RETRIES=12
            RETRY_DELAY=5
            
            for i in $(seq 1 $MAX_RETRIES); do
              sleep $RETRY_DELAY
              
              # Ê£ÄÊü•ËøõÁ®ãÁä∂ÊÄÅ
              if ! ps -p $BACKEND_PID > /dev/null; then
                echo "‚ùå Backend process exited unexpectedly!"
                echo "===== BEGIN BACKEND LOGS ====="
                cat $BACKEND_LOG
                echo "===== END BACKEND LOGS ====="
                exit 1
              fi
              
              # Ê£ÄÊü•Á´ØÂè£ÁõëÂê¨
              if ss -tuln | grep ":$SERVER_PORT " >/dev/null; then
                echo "‚úÖ Port $SERVER_PORT is listening"
                break
              fi
              
              echo "‚åõ Attempt $i/$MAX_RETRIES: Waiting for port..."
              
              if [ $i -eq $MAX_RETRIES ]; then
                echo "‚ùå Backend failed to start after $((MAX_RETRIES*RETRY_DELAY)) seconds"
                echo "===== NETSTAT OUTPUT ====="
                ss -tulnp
                echo "===== PROCESS LIST ====="
                ps aux | grep java
                exit 1
              fi
            done
            
            # ÂÅ•Â∫∑Ê£ÄÊü•
            echo "ü©∫ Performing health check..."
            HEALTH_CHECK_URL="http://localhost:$SERVER_PORT/actuator/health"
            for i in {1..5}; do
              if curl -s $HEALTH_CHECK_URL | grep '"status":"UP"'; then
                echo "‚úÖ Health check passed"
                break
              else
                echo "‚ö†Ô∏è Health check attempt $i/5 failed"
                sleep 2
              fi
              
              if [ $i -eq 5 ]; then
                echo "‚ùå Health check failed at $HEALTH_CHECK_URL"
                echo "===== RESPONSE ====="
                curl -i $HEALTH_CHECK_URL || true
                exit 1
              fi
            done

            # ========== ÂÆåÊàêÈò∂ÊÆµ ==========
            echo "‚úÖ Deployment completed successfully!"
            echo "Frontend: $FRONTEND_IMAGE @ http://${{ secrets.SERVER_HOST }}:$FRONTEND_PORT"
            echo "Backend: $BACKEND_JAR_NAME @ http://${{ secrets.SERVER_HOST }}:$SERVER_PORT"
