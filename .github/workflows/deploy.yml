name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Execute Deployment Scripts
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -ex
            
            # ========== ÂàùÂßãÂåñËÆæÁΩÆ ==========
            echo "üöÄ Starting deployment process..."
            BRANCH="main"
            REPO_DIR="/www/cicd_wuyu/wuyuProject/WuYuEducation"
            cd "$REPO_DIR" || { echo "‚ùå Cannot access $REPO_DIR"; exit 1; }
            
            # ========== ‰ª£Á†ÅÂêåÊ≠• ==========
            echo "üîÑ Syncing $BRANCH branch..."
            git reset --hard HEAD
            git checkout -f $BRANCH
            git pull origin $BRANCH --rebase
            
            # ========== ÈÖçÁΩÆËÆæÁΩÆ ==========
            SERVER_PORT=9080
            FRONTEND_PORT=9180
            BACKEND_JAR_NAME="wuyu-server-main.jar"
            FRONTEND_IMAGE="wuyu-front-main"
            BACKEND_LOG="backend-main.log"
            
            # ========== ÁõÆÂΩïÈ™åËØÅ ==========
            echo "üîç Verifying project structure..."
            if [ ! -d "wuyu-front" ]; then
              echo "‚ùå wuyu-front directory missing!"
              echo "Directory contents:"
              ls -la
              exit 1
            fi
            
            # ========== ÂâçÁ´ØÈÉ®ÁΩ≤ ==========
            echo "üìÇ Processing frontend..."
            cd wuyu-front || { echo "‚ùå Cannot enter wuyu-front directory"; exit 1; }
            
            # ÂÆâÂÖ®Ê∏ÖÁêÜÔºà‰øùÁïô Docker ÊûÑÂª∫ÂøÖÈúÄÁöÑÊñá‰ª∂Ôºâ
            echo "üßπ Cleaning workspace (preserving Docker build files)..."
            # ‰øùÁïôÊâÄÊúâ Git Ë∑üË∏™Êñá‰ª∂ÂíåÁõÆÂΩï
            git clean -fdx -e 'Dockerfile*' -e 'package*.json' -e 'src/' -e 'public/' || true
            
            echo "üìÅ Current directory contents:"
            ls -la
            
            # Á°ÆËÆ§ Dockerfile Â≠òÂú®
            if [ ! -f "Dockerfile" ]; then
              echo "‚ùå ERROR: Dockerfile missing in wuyu-front directory!"
              echo "Please ensure Dockerfile is committed to the repository"
              exit 1
            fi
            
            # Á¶ÅÁî®ÁºìÂ≠òÊûÑÂª∫ÈïúÂÉè
            echo "üèóÔ∏è Building Frontend (no-cache)..."
            docker build \
              --no-cache \
              --pull \
              -t $FRONTEND_IMAGE . || { 
                echo "‚ùå Frontend build failed"; 
                echo "Build context contents:"; 
                ls -la .; 
                exit 1; 
              }
            
            # ÈÉ®ÁΩ≤ÂâçÁ´ØÂÆπÂô®
            echo "üöÄ Deploying Frontend container..."
            docker stop $FRONTEND_IMAGE >/dev/null 2>&1 || true
            docker rm $FRONTEND_IMAGE >/dev/null 2>&1 || true
            docker run -d \
              --name $FRONTEND_IMAGE \
              -p $FRONTEND_PORT:80 \
              $FRONTEND_IMAGE || { echo "‚ùå Frontend deployment failed"; exit 1; }
            
            # ========== ÂêéÁ´ØÈÉ®ÁΩ≤ ==========
            echo "üìÇ Processing backend..."
            cd ../wuyu-server || { echo "‚ùå Cannot enter wuyu-server directory"; exit 1; }
            
            # Ê∏ÖÁêÜÂêéÁ´ØÂ∑•‰ΩúÂå∫
            git clean -fdx -e 'pom.xml' -e 'src/'
            
            # ÂÅúÊ≠¢Áé∞ÊúâËøõÁ®ã
            echo "üõë Stopping existing backend..."
            PID=$(lsof -t -i:$SERVER_PORT || true)
            if [ ! -z "$PID" ]; then
              kill -9 $PID
              sleep 3
            fi
            
            # ÊûÑÂª∫È°πÁõÆ
            echo "üîß Building backend with Maven..."
            mvn clean package -DskipTests || { 
                echo "‚ùå Backend build failed";
                echo "===== MVEN BUILD LOG ====="
                cat target/surefire-reports/*.txt || true;
                exit 1;
            }
            
            mv target/*.jar target/$BACKEND_JAR_NAME
            rm -f $BACKEND_LOG
            
            # ÂêØÂä®Â∫îÁî®
            echo "üöÄ Starting backend on port $SERVER_PORT..."
            nohup java -jar target/$BACKEND_JAR_NAME --server.port=$SERVER_PORT > $BACKEND_LOG 2>&1 &
            BACKEND_PID=$!
            echo "üìù Backend PID: $BACKEND_PID"
            
            # ÂÅ•Â∫∑Ê£ÄÊü•
            echo "ü©∫ Waiting for backend to start..."
            for i in {1..10}; do
              if curl -sSf http://localhost:$SERVER_PORT/actuator/health >/dev/null; then
                echo "‚úÖ Backend is up and running!"
                break
              else
                echo "‚è≥ Waiting for backend startup ($i/10)..."
                sleep 5
              fi
              
              if [ $i -eq 10 ]; then
                echo "‚ùå Backend failed to start within 50 seconds"
                echo "===== BACKEND LOGS ====="
                cat $BACKEND_LOG
                echo "===== PROCESS LIST ====="
                ps aux | grep java
                exit 1
              fi
            done
            
            # ========== Ê∏ÖÁêÜÂíåÊÄªÁªì ==========
            echo "üßπ Cleaning Docker resources..."
            docker system prune -af --filter "until=48h"
            
            echo "‚úÖ Deployment completed successfully!"
            echo "Frontend URL: http://${{ secrets.SERVER_HOST }}:$FRONTEND_PORT"
            echo "Backend URL: http://${{ secrets.SERVER_HOST }}:$SERVER_PORT"
